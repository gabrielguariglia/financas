{"version":3,"sources":["App.js","index.js"],"names":["App","useState","moeda","setMoeda","valor","setValor","obtendoMoeda","setObtendoMoeda","conversor","setConversor","convertendo","setConvertendo","a","process","url","fetch","then","response","json","data","catch","error","console","message","result","parseFloat","document","getElementById","value","currencies","buy","Navbar","bg","Brand","href","Jumbotron","Row","className","class","onChange","event","target","Card","style","width","Body","Title","name","Text","variation","Button","onClick","obtemMoeda","variant","Spinner","size","animation","color","type","min","id","step","readOnly","converteMoeda","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.afc6f36b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Row from 'react-bootstrap/Row'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner'\nimport { GiMagnifyingGlass } from 'react-icons/gi'\n\n\nfunction App() {\n  const [moeda, setMoeda] = useState('')\n  const [valor, setValor] = useState(null)\n  const [obtendoMoeda, setObtendoMoeda] = useState(false)\n  const [conversor, setConversor] = useState('')\n  const [convertendo, setConvertendo] = useState(false)\n\n  \n  //pegando valores da API\n  async function obtemMoeda(moeda) {\n    setObtendoMoeda(true)\n    let chaveAPI = process.env.REACT_APP_APIKEY\n    let url = `https://api.hgbrasil.com/finance?format=json-cors&array_limit=1&fields=only_results,${moeda}&key=${chaveAPI}`\n    await fetch(url)\n\n      .then(response => response.json())\n      .then(data => {\n        setValor(data)\n      })\n      .catch(function (error) {\n        console.error(`Erro ao obter a Moeda: ${error.message}`)\n      })\n    setObtendoMoeda(false)\n  }\n\n  //convertendo valor\n  async function converteMoeda(conversor) {\n    setConvertendo(true)\n    let chaveAPI = process.env.REACT_APP_APIKEY\n    let url = `https://api.hgbrasil.com/finance?format=json-cors&array_limit=1&fields=only_results,${conversor}&key=${chaveAPI}`\n    await fetch(url)\n\n      .then(response => response.json())\n      .then(data => {\n       \n        //converte o valor inserido\n        let num = parseFloat(document.getElementById(\"num\").value);\n        let result = num * data.currencies.buy;\n        document.getElementById(\"resultado\").value = result;\n        \n\n      })\n      .catch(function (error) {\n        console.error(`Erro ao obter a Moeda: ${error.message}`)\n      })\n      setConvertendo(false)\n  }\n\n\n  return (\n    <>\n      <Navbar bg=\"warning\">\n        <Navbar.Brand href=\"#inicio\">FatecFinanças</Navbar.Brand>\n      </Navbar>\n      <Jumbotron >\n        <h1> Fatec Finanças</h1>\n        <h3>Consulta da cotação das principais moedas ao redor do globo.</h3>\n        <h3>Conversor de moedas para real.</h3>\n      </Jumbotron>\n\n      {/* Seleciona a moeda que o usuario queira ver */}\n      <Row className=\"justify-content-center\">\n        <h2 class=\"text-light\">Veja a Cotação da moeda escolhida</h2>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <select onChange={event => setMoeda(event.target.value)}>\n          <option value=\"\">  Selecione uma moeda </option>\n          <option value=\"BTC\"> Bitcoin </option>\n          <option value=\"EUR\"> Euro</option>\n          <option value=\"GBP\"> Libra Esterlina </option>\n          <option value=\"USD\"> Dólar</option>\n          <option value=\"ARS\"> Peso Argentino</option>\n          <option value=\"JPY\"> Iene  </option>\n        </select>\n      </Row>\n\n      <Row className=\"justify-content-center\">\n        {valor &&\n          <Card style={{ width: '18rem' }}>\n            <Card.Body>\n              <Card.Title>{valor.currencies.name}</Card.Title>\n              <Card.Text>\n                <h5>Valor : R${valor.currencies.buy}</h5>\n                <h5>Variação : {valor.currencies.variation}%</h5>\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        }\n      </Row>\n\n      {/* Ative a função que busca os valores na API */}\n      <Row className=\"justify-content-center\">\n        <Button onClick={() => obtemMoeda(moeda)} variant=\"success\">\n          {obtendoMoeda ? <Spinner size=\"sm\" animation=\"grow\" /> : <GiMagnifyingGlass color=\"#000000\" size=\"20\" />}\n        Obter Moeda</Button>\n      </Row>\n\n      <Row>\n        <br></br>\n        <br></br>\n      </Row>\n\n        {/* Seleciona a moeda que  */}\n        <Row className=\"justify-content-center\">\n          <h2 class=\"text-light\">Converta o valor que quiser para real</h2>\n        </Row>\n      <Row className=\"justify-content-center\">\n        <select onChange={event => setConversor(event.target.value)}>\n          <option value=\"\">  Selecione uma moeda </option>\n          <option value=\"BTC\"> Bitcoin </option>\n          <option value=\"EUR\"> Euro</option>\n          <option value=\"GBP\"> Libra Esterlina </option>\n          <option value=\"USD\"> Dólar</option>\n          <option value=\"ARS\"> Peso Argentino</option>\n          <option value=\"JPY\"> Iene  </option>\n        </select>\n\n        <Row>\n          <input type=\"number\" min=\"0\" id=\"num\"></input>\n        </Row>\n\n          <Card style={{ width: '18rem' }}>\n            <Card.Body>\n              <Card.Text>\n                R$<input type=\"number\" step=\"0.01\" id=\"resultado\" readOnly />\n              </Card.Text>\n            </Card.Body>\n          </Card>\n      </Row>\n\n      <Row className=\"justify-content-center\">\n        <Button onClick={() => converteMoeda(conversor)} variant=\"success\">\n          {convertendo ? <Spinner size=\"sm\" animation=\"grow\" /> : <GiMagnifyingGlass color=\"#000000\" size=\"20\" />}\n          Converter</Button>\n      </Row>\n\n    </>\n    \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}